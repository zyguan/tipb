// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tablecache_agent.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InvalidateRequest struct {
	TableId      int64  `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	MinReadLease uint64 `protobuf:"varint,2,opt,name=min_read_lease,json=minReadLease,proto3" json:"min_read_lease,omitempty"`
}

func (m *InvalidateRequest) Reset()         { *m = InvalidateRequest{} }
func (m *InvalidateRequest) String() string { return proto.CompactTextString(m) }
func (*InvalidateRequest) ProtoMessage()    {}
func (*InvalidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTablecacheAgent, []int{0}
}

func (m *InvalidateRequest) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *InvalidateRequest) GetMinReadLease() uint64 {
	if m != nil {
		return m.MinReadLease
	}
	return 0
}

type InvalidateResponse struct {
	MaxReadTs uint64 `protobuf:"varint,1,opt,name=max_read_ts,json=maxReadTs,proto3" json:"max_read_ts,omitempty"`
}

func (m *InvalidateResponse) Reset()         { *m = InvalidateResponse{} }
func (m *InvalidateResponse) String() string { return proto.CompactTextString(m) }
func (*InvalidateResponse) ProtoMessage()    {}
func (*InvalidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTablecacheAgent, []int{1}
}

func (m *InvalidateResponse) GetMaxReadTs() uint64 {
	if m != nil {
		return m.MaxReadTs
	}
	return 0
}

func init() {
	proto.RegisterType((*InvalidateRequest)(nil), "tipb.InvalidateRequest")
	proto.RegisterType((*InvalidateResponse)(nil), "tipb.InvalidateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TableCacheAgent service

type TableCacheAgentClient interface {
	Invalidate(ctx context.Context, in *InvalidateRequest, opts ...grpc.CallOption) (*InvalidateResponse, error)
}

type tableCacheAgentClient struct {
	cc *grpc.ClientConn
}

func NewTableCacheAgentClient(cc *grpc.ClientConn) TableCacheAgentClient {
	return &tableCacheAgentClient{cc}
}

func (c *tableCacheAgentClient) Invalidate(ctx context.Context, in *InvalidateRequest, opts ...grpc.CallOption) (*InvalidateResponse, error) {
	out := new(InvalidateResponse)
	err := grpc.Invoke(ctx, "/tipb.TableCacheAgent/Invalidate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TableCacheAgent service

type TableCacheAgentServer interface {
	Invalidate(context.Context, *InvalidateRequest) (*InvalidateResponse, error)
}

func RegisterTableCacheAgentServer(s *grpc.Server, srv TableCacheAgentServer) {
	s.RegisterService(&_TableCacheAgent_serviceDesc, srv)
}

func _TableCacheAgent_Invalidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableCacheAgentServer).Invalidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tipb.TableCacheAgent/Invalidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableCacheAgentServer).Invalidate(ctx, req.(*InvalidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TableCacheAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tipb.TableCacheAgent",
	HandlerType: (*TableCacheAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invalidate",
			Handler:    _TableCacheAgent_Invalidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tablecache_agent.proto",
}

func (m *InvalidateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTablecacheAgent(dAtA, i, uint64(m.TableId))
	}
	if m.MinReadLease != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTablecacheAgent(dAtA, i, uint64(m.MinReadLease))
	}
	return i, nil
}

func (m *InvalidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxReadTs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTablecacheAgent(dAtA, i, uint64(m.MaxReadTs))
	}
	return i, nil
}

func encodeVarintTablecacheAgent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InvalidateRequest) Size() (n int) {
	var l int
	_ = l
	if m.TableId != 0 {
		n += 1 + sovTablecacheAgent(uint64(m.TableId))
	}
	if m.MinReadLease != 0 {
		n += 1 + sovTablecacheAgent(uint64(m.MinReadLease))
	}
	return n
}

func (m *InvalidateResponse) Size() (n int) {
	var l int
	_ = l
	if m.MaxReadTs != 0 {
		n += 1 + sovTablecacheAgent(uint64(m.MaxReadTs))
	}
	return n
}

func sovTablecacheAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTablecacheAgent(x uint64) (n int) {
	return sovTablecacheAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InvalidateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTablecacheAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTablecacheAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReadLease", wireType)
			}
			m.MinReadLease = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTablecacheAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReadLease |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTablecacheAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTablecacheAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTablecacheAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReadTs", wireType)
			}
			m.MaxReadTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTablecacheAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReadTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTablecacheAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTablecacheAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTablecacheAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTablecacheAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTablecacheAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTablecacheAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTablecacheAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTablecacheAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTablecacheAgent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTablecacheAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTablecacheAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tablecache_agent.proto", fileDescriptorTablecacheAgent) }

var fileDescriptorTablecacheAgent = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcb, 0x4a, 0xc4, 0x30,
	0x18, 0x85, 0x27, 0x5a, 0xbc, 0xfc, 0x8a, 0x62, 0xf0, 0x52, 0x67, 0x51, 0x86, 0xe2, 0x62, 0xdc,
	0x54, 0x50, 0x5f, 0x60, 0x74, 0x35, 0xe0, 0x42, 0x4a, 0xf7, 0xe5, 0x6f, 0xf3, 0x53, 0x03, 0xcd,
	0xc5, 0x49, 0x94, 0x79, 0x14, 0x1f, 0xc9, 0xa5, 0x8f, 0x20, 0xf5, 0x45, 0x24, 0xe9, 0x42, 0x61,
	0x76, 0xc9, 0x39, 0x9c, 0xef, 0xe4, 0x04, 0xce, 0x3d, 0x36, 0x3d, 0xb5, 0xd8, 0xbe, 0x50, 0x8d,
	0x1d, 0x69, 0x5f, 0xd8, 0x95, 0xf1, 0x86, 0x27, 0x5e, 0xda, 0x66, 0x7a, 0xda, 0x99, 0xce, 0x44,
	0xe1, 0x26, 0x9c, 0x46, 0x2f, 0xaf, 0xe0, 0x64, 0xa9, 0xdf, 0xb1, 0x97, 0x02, 0x3d, 0x95, 0xf4,
	0xfa, 0x46, 0xce, 0xf3, 0x4b, 0xd8, 0x8b, 0xa8, 0x5a, 0x8a, 0x94, 0xcd, 0xd8, 0x7c, 0xbb, 0xdc,
	0x8d, 0xf7, 0xa5, 0xe0, 0x57, 0x70, 0xa4, 0xa4, 0xae, 0x57, 0x84, 0xa2, 0xee, 0x09, 0x1d, 0xa5,
	0x5b, 0x33, 0x36, 0x4f, 0xca, 0x43, 0x25, 0x75, 0x49, 0x28, 0x9e, 0x82, 0x96, 0xdf, 0x03, 0xff,
	0x4f, 0x75, 0xd6, 0x68, 0x47, 0x3c, 0x83, 0x03, 0x85, 0xeb, 0x31, 0xeb, 0x5d, 0x24, 0x27, 0xe5,
	0xbe, 0xc2, 0x75, 0x08, 0x56, 0xee, 0xb6, 0x82, 0xe3, 0x2a, 0xd4, 0x3c, 0x86, 0x05, 0x8b, 0x30,
	0x80, 0x2f, 0x00, 0xfe, 0x40, 0xfc, 0xa2, 0x08, 0x4b, 0x8a, 0x8d, 0x07, 0x4f, 0xd3, 0x4d, 0x63,
	0xec, 0xcc, 0x27, 0x0f, 0xd7, 0x9f, 0x43, 0xc6, 0xbe, 0x86, 0x8c, 0x7d, 0x0f, 0x19, 0xfb, 0xf8,
	0xc9, 0x26, 0x70, 0xd6, 0x1a, 0x55, 0x58, 0xa9, 0xbb, 0x16, 0x6d, 0xe1, 0xa5, 0x68, 0x62, 0xfa,
	0x99, 0x35, 0x3b, 0xf1, 0x4f, 0xee, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xb5, 0x97, 0x40,
	0x49, 0x01, 0x00, 0x00,
}
